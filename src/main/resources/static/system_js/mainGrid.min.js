import {HTMLFather as HTML} from "../system_js/HTMLFather.js";
import {CellFather as Cell} from "../system_js/Cell.min.js"
class MainGridFather
{
    static allGrids = [];
    cellArray = [];
    id;
    number;
    gridElem;
    outsideRows;
    navigate;
    data;
    cellCount = 0;
    loading = true;
    prev; 
    static activePage = 0;
    constructor(loadData)
    {
        this.id = loadData.id;
        this.number = loadData.number;
        this.outsideRows = loadData.cellArray.length;
        MainGridFather.allGrids.push(this);
        this.number = MainGridFather.allGrids.length;
        this.data = loadData;
        if(MainGridFather.allGrids.length == 1)
        {
            MainGridFather.show(0);
        } 
        else if(MainGridFather.allGrids.length > 1)
        {
            MainGridFather.show(0, true);
        }
    }
    static show(pageCount, refresh = false)
    {
        if(refresh)
        {
            MainGridFather.allGrids[pageCount].gridElem.classList.toggle("hide");
        }
        if(MainGridFather.activePage != pageCount)
            MainGridFather.allGrids[pageCount].prev = MainGridFather.allGrids[MainGridFather.activePage];
        MainGridFather.activePage = pageCount;
        if(MainGridFather.allGrids[pageCount].loading)
        {
            MainGridFather.allGrids[pageCount].loading = false;
            MainGridFather.allGrids[pageCount].createGrid();
            MainGridFather.allGrids[pageCount].setActive();
            MainGridFather.allGrids[pageCount].loadAllCellsInstances();
        }
        else
        {
            MainGridFather.allGrids[MainGridFather.activePage].gridElem.classList.toggle("hide");
            MainGridFather.allGrids[pageCount].setActive();
        }

    }
    loadAllCellsInstances()
    {
        for(let cellData of this.data.cellArray)
        {
            this.cellArray.push(new Cell(this, cellData));
        }
        this.cellArray[this.cellCount].createElement();
    }
    createCell()
    {
        this.cellCount++;
        if(this.cellCount < this.data.cellArray.length)
        {
            this.cellArray[this.cellCount].createElement();
        }
    }
    createGrid()
    {
        this.gridElem = HTML.createAndAppend("DIV");
        HTML.addStyles(["mainGrid", "absolute", "gapFivePix", "hCenter" , "bottomMargin10px"], [this.gridElem]);
        this.gridElem.style.gridTemplateRows = `repeat(${this.outsideRows}, auto)`;
    }
    setActive()
    {
        if(MainGridFather.allGrids[MainGridFather.activePage].navigate)
        {
            MainGridFather.allGrids[MainGridFather.activePage].gridElem.removeChild(MainGridFather.allGrids[MainGridFather.activePage].navigate);
            MainGridFather.allGrids[MainGridFather.activePage].navigate = null;
        }
        if(MainGridFather.allGrids[MainGridFather.activePage].prev) 
        {
            MainGridFather.allGrids[MainGridFather.activePage].prev.gridElem.classList.toggle("hide");
        }
        this.appendPageControllCell();
    }
    appendPageControllCell()
    {
        if(MainGridFather.allGrids.indexOf(this) == 0)
        {
            if(MainGridFather.allGrids.length > 1)
            {
                this.navigate = this.nextPage();
                this.gridElem.appendChild(this.navigate);
            }
        }
        else if(MainGridFather.allGrids.indexOf(this) == MainGridFather.allGrids.length - 1)
        {
            this.navigate = this.prevPage();
            this.gridElem.appendChild(this.navigate);
        }
        else
        {
            let d = HTML.create("DIV");
            d.appendChild(this.prevPage());
            d.appendChild(this.nextPage());
            HTML.addStyles(["justifySelfCenter", "alignSelfCenter"], [d]);
            this.navigate = d;
            this.gridElem.appendChild(this.navigate);
        }
    }
    nextPage()
    {
        let nBut = HTML.create("BUTTON");
        HTML.addStyles(["justifySelfCenter", "alignSelfCenter", "margin5pix"], [nBut]);
        nBut.innerText = "Вперед";
        nBut.onclick = ()=>{
            MainGridFather.show(MainGridFather.allGrids.indexOf(this) + 1);
        };
        return nBut;
    }
    prevPage()
    {
        let pBut = HTML.create("BUTTON");
        HTML.addStyles(["justifySelfCenter", "alignSelfCenter", "margin5pix"], [pBut]);
        pBut.innerText = "Назад";
        pBut.onclick = ()=>{
            MainGridFather.show(MainGridFather.allGrids.indexOf(this) - 1);
        };
        return pBut;
    }
}
export {MainGridFather};