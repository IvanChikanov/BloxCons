import { HTMLFather as HTML } from "../system_js/HTMLFather.js";
class CellFather
{
    number;
    #grid;
    id;
    moduleLink = null;
    inside;
    tools;
    cellData;
    constructor(grid, data)
    {
        this.cellData = data;
        this.number = data.number;
        this.id = data.id;
        this.#grid = grid;
        this.moduleLink = data.moduleLink;
    }
    editGridArea()
    {
        return `${this.number}/1/${this.number}/1`;
    }
    createElement()
    {
        this.inside = HTML.createAndAppend("DIV", this.#grid.gridElem);
        this.loadModule(this.getModulePath(this.moduleLink));
    }
    async loadModule(path = null)
    {
        let cls;
        if(path != null){
            let m = await import(path);
            cls = new m.mdl(this.getGrid(), this.cellData);
            //cls.setData(this.cellData);
        }
        else
        {
            cls = this.getEmpty(this.getGrid(), this);
        }
        let grid = await cls.init(this.id);
        this.replaceElement(grid);
        if(cls.needWaiting())
        {
            grid.addEventListener("moduleLoaded", ()=>{
                this.getGrid().createCell();
            });
        }
        return cls;
    }
    replaceElement(newElem)
    {
        this.#grid.gridElem.replaceChild(newElem, this.inside);
        this.inside = newElem;
        this.inside.style.gridArea = this.editGridArea();
    }
    getGrid()
    {
        return this.#grid;
    }
    getModulePath(moduleId)
    {
        if(moduleId == null)
        {
            return null;
        }
        return `./${moduleId}`;
    }
    getEmpty(cellGrid, cellInstance)
    {
        let obj =  {
            test: cellGrid,
            init: async function(){
                let insideParent = HTML.create("DIV");
                HTML.addStyles(["grid", "emptyCell", "zIndex50"], [insideParent]);
                let inside = HTML.createAndAppend("h1", insideParent);
                inside.innerText = "Не заполнен модуль";
                HTML.addStyles(["justifySelfCenter", "alignSelfCenter"], [inside]);
                let mobs = new MutationObserver(follow => {
                    cellGrid.createCell();
                    mobs.disconnect();
                });
                mobs.observe(cellGrid.gridElem, {childList: true});
                return insideParent;
            },
            needWaiting: false
        };
        obj.test = cellGrid;

        return obj;
    }
}
export {CellFather};